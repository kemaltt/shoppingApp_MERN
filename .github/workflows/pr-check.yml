name: PR Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  pr-quality:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Commit message kontrolü
      run: |
        # Son commit mesajını kontrol et
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        echo "Son commit mesajı: $COMMIT_MSG"
        
        # Commit mesajı formatını kontrol et (örn: "feat:", "fix:", "docs:" ile başlamalı)
        if [[ ! "$COMMIT_MSG" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
          echo "❌ Commit mesajı conventional format'a uygun değil"
          echo "Format: type(scope): description"
          echo "Örnekler: feat: add user login, fix(auth): handle token expiry"
          exit 1
        else
          echo "✅ Commit mesajı formatı doğru"
        fi
    
    - name: Branch adı kontrolü
      run: |
        BRANCH_NAME=${GITHUB_HEAD_REF}
        echo "Branch adı: $BRANCH_NAME"
        
        # Branch adı formatını kontrol et
        if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
          echo "❌ Branch adı conventional format'a uygun değil"
          echo "Format: type/description"
          echo "Örnekler: feature/user-auth, bugfix/login-error, hotfix/security-patch"
          exit 1
        else
          echo "✅ Branch adı formatı doğru"
        fi
    
    - name: Değişen dosyaları analiz et
      run: |
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        echo "Değişen dosyalar:"
        echo "$CHANGED_FILES"
        
        # Kritik dosyalar değişti mi kontrol et
        if echo "$CHANGED_FILES" | grep -q "package.json\|package-lock.json"; then
          echo "⚠️  Package dosyaları değişti - dikkatli review gerekli"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "\.env\|config"; then
          echo "⚠️  Konfigürasyon dosyaları değişti - güvenlik review gerekli"
        fi
    
    - name: PR boyutu kontrolü
      run: |
        CHANGED_LINES=$(git diff --stat origin/main...HEAD | tail -n1 | grep -o '[0-9]\+ insertions\|[0-9]\+ deletions' | grep -o '[0-9]\+' | paste -sd+ | bc)
        echo "Toplam değişen satır sayısı: $CHANGED_LINES"
        
        if [ "$CHANGED_LINES" -gt 500 ]; then
          echo "⚠️  PR çok büyük ($CHANGED_LINES satır). Daha küçük PR'lara bölmeyi düşünün."
        else
          echo "✅ PR boyutu uygun"
        fi

  pr-preview:
    name: PR Preview Deploy
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Frontend build (preview)
      run: |
        cd client
        npm ci || npm install --legacy-peer-deps
        npm run build
    
    - name: Preview URL oluştur
      run: |
        PR_NUMBER=${{ github.event.number }}
        echo "Preview URL: https://shopping-app-pr-${PR_NUMBER}.vercel.app" >> $GITHUB_STEP_SUMMARY